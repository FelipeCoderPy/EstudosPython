import mysql.connector
from mysql.connector import Error
import time
import os

# Configura√ß√µes do banco de origem
source_config = {
    'host': '168.0.0.40',
    'database': 'DePara',
    'user': 'fecsantos',
    'password': '@Fec13022025'
}

# Configura√ß√µes do banco de destino
dest_config = {
    'host': '172.25.100.14',
    'database': 'OlosCloud',
    'user': 'fecsantos',
    'password': '@Fec13022025'
}

BATCH_SIZE = 50000
OFFSET_FILE = "offset.txt"

def get_current_offset():
    if os.path.exists(OFFSET_FILE):
        with open(OFFSET_FILE, "r") as f:
            return int(f.read().strip())
    return 0  # Se n√£o existir, come√ßa do zero

def save_current_offset(offset):
    with open(OFFSET_FILE, "w") as f:
        f.write(str(offset))

def transfer_data():
    try:
        source_conn = mysql.connector.connect(**source_config)
        dest_conn = mysql.connector.connect(**dest_config)

        source_cursor = source_conn.cursor()
        dest_cursor = dest_conn.cursor()

        offset = get_current_offset()
        print(f"üìç Iniciando transfer√™ncia a partir da linha {offset}...")

        while True:
            
            source_cursor.execute(f"""
                SELECT * FROM Tbl_OlosCloud_Filial
                LIMIT {BATCH_SIZE} OFFSET {offset}
            """)
            rows = source_cursor.fetchall()

            if not rows:
                print("‚úÖ Todos os dados foram transferidos.")
                break

            # Gera o INSERT com base no n√∫mero de colunas
            placeholders = ", ".join(["%s"] * len(rows[0]))
            insert_query = f"INSERT INTO Tbl_OlosCloud_Filial VALUES ({placeholders})"

            dest_cursor.executemany(insert_query, rows)
            dest_conn.commit()

            offset += BATCH_SIZE
            save_current_offset(offset)

            print(f"üöö {offset} linhas transferidas com sucesso...")

    except Error as e:
        print(f"‚ùå Erro durante transfer√™ncia: {e}")
        print("O progresso foi salvo. Voc√™ pode reiniciar o script sem perder dados.")

    finally:
        if 'source_cursor' in locals(): source_cursor.close()
        if 'dest_cursor' in locals(): dest_cursor.close()
        if 'source_conn' in locals(): source_conn.close()
        if 'dest_conn' in locals(): dest_conn.close()
        print("üîí Conex√µes encerradas.")

if __name__ == "__main__":
    start_time = time.time()
    transfer_data()
    print(f"‚è±Ô∏è Conclu√≠do em {round(time.time() - start_time, 2)} segundos.")
