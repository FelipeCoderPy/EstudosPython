import oci
from oci.exceptions import ServiceError

def verificar_arquivos_zerados_com_paginacao(config, bucket_name, prefixo, extensao=".csv"):
    """
    Verifica arquivos com tamanho zero em um bucket do OCI Object Storage
    com suporte a pagina√ß√£o para muitos arquivos
    
    Args:
        config: Configura√ß√£o do OCI
        bucket_name: Nome do bucket
        prefixo: Prefixo para filtrar arquivos
        extensao: Extens√£o dos arquivos a verificar
    
    Returns:
        Lista de arquivos zerados
    """
    try:
        # Conex√£o com o Object Storage
        object_storage = oci.object_storage.ObjectStorageClient(config)
        namespace = object_storage.get_namespace().data
        
        arquivos_zerados = []
        total_objetos = 0
        next_start_with = None
        
        print(f"Buscando arquivos com prefixo '{prefixo}'...")
        
        # Loop de pagina√ß√£o
        while True:
            # Listar objetos com pagina√ß√£o
            list_objects_response = object_storage.list_objects(
                namespace, 
                bucket_name, 
                prefix=prefixo,
                start=next_start_with
            )
            
            objetos = list_objects_response.data.objects
            total_objetos += len(objetos)
            
            print(f"Processando lote de {len(objetos)} arquivos...")
            
            for obj in objetos:
                nome = obj.name
                if nome.endswith(extensao):
                    try:
                        # Usa head_object para obter metadados sem baixar o conte√∫do
                        response = object_storage.head_object(
                            namespace, 
                            bucket_name, 
                            nome
                        )
                        
                        tamanho = int(response.headers['content-length'])
                        
                        if tamanho == 0:
                            print(f"{nome}")
                            arquivos_zerados.append(nome)
                            
                    except ServiceError as e:
                        print(f"‚ùå Erro ao acessar {nome}: {e}")
            
            # Verifica se h√° mais p√°ginas
            next_start_with = list_objects_response.data.next_start_with
            if not next_start_with:
                break
                
            print(f"Pr√≥xima p√°gina: {next_start_with}")
        
        print(f"\nüìä Processamento conclu√≠do!")
        print(f"üìÅ Total de objetos analisados: {total_objetos}")
        print(f"‚ùå Total de arquivos {extensao} com tamanho 0: {len(arquivos_zerados)}")
        
        if arquivos_zerados:
            print(f"\nüìã Lista completa de arquivos zerados ({len(arquivos_zerados)} encontrados):")
            for arquivo in arquivos_zerados:
                print(f"  {arquivo}")
        else:
            print("‚úÖ Nenhum arquivo zerado encontrado.")
        
        return arquivos_zerados
        
    except ServiceError as e:
        print(f"‚ùå Erro na conex√£o com OCI: {e}")
        return []

# Configura√ß√£o do OCI
config = {
    "user": "ocid1.user.oc1..aaaaaaaawgn2nn7vvsynzuswbz6mc6lfmsil5lkp4kpzfnwjllzsm4annulq",
    "key_file": r"C:\Users\fecsantos\oci\felipe.costa@novaquest.com.br_2025-04-15T20_04_46.395Z.pem",
    "fingerprint": "a6:5e:6f:37:62:de:80:8f:4a:eb:af:22:00:8b:3f:60",
    "tenancy": "ocid1.tenancy.oc1..aaaaaaaa7ku32scdbd6dfdcb5k4336gbl4l3kcy3y2xd6jodhzx3eg5nm7qa",
    "region": "sa-saopaulo-1"
}

# Par√¢metros
bucket_name = "BckOlosCloud"
prefixo = "cloudWaySummary-202508"
extensao = ".csv"

# Executar verifica√ß√£o
if __name__ == "__main__":
    arquivos_zerados = verificar_arquivos_zerados_com_paginacao(config, bucket_name, prefixo, extensao)
